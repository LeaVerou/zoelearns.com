@import url("../common/base.css");
@import url("../common/settings/style.css");

html {
	font: 150%/1 system-ui, sans-serif;
}

body {
	height: 100svh;
	display: flex;
	flex-flow: column;
	gap: 1rem;
	margin: 0;
	padding: 1rem;
	box-sizing: border-box;
}

.progress {
	position: absolute;
	top: 0;
	inset-inline: 0;

	--color-1: var(--color-blue);
	--color-2: var(--color-blue);
	--indicator-color: color-mix(in oklch, var(--color-1), var(--color-2) calc(100% * (var(--progress) - var(--progress-1, 0)) / (var(--progress-2, 1) - var(--progress-1, 0))));

	&.bad {
		--color-1: var(--color-red);
		--color-2: var(--color-yellow);
		--progress-1: 0;
		--progress-2: 0.3;
	}

	&.ok {
		--color-1: var(--color-yellow);
		--color-2: var(--color-green);
		--progress-1: 0.3;
		--progress-2: 0.7;
	}

	&.good {
		--color-1: var(--color-green);
		--color-2: oklch(from var(--color-green) calc(l * .9) c calc(h + 20));
		--progress-1: 0.7;
		--progress-2: 1;
	}

	.percentage {
		position: absolute;
		inset-block: 0;
		inset-inline-end: calc(100% - 100% * var(--progress) + .3em);
		line-height: 1.5;
		font-size: 50%;
		font-weight: 900;
		color: canvas;
		transition: 400ms;
	}
}

progress {
	display: block;
	width: 100%;
	height: .8em;
	border-radius: 0;
	background: var(--color-neutral-90);

	&::-webkit-progress-bar {
		background: transparent;
	}

	&::-webkit-progress-value {
		background-color: var(--indicator-color);
		transition: 400ms;
	}

	&::-moz-progress-bar {
		background-color: var(--indicator-color);
	}
}

.show-settings {
	position: absolute;
	inset-block-start: .8rem;
	inset-inline-end: .4rem;

	@media (aspect-ratio < 1.2) {
		font-size: 80%;
	}
}

.correct {
	--color: var(--color-green);
	--icon: var(--icon-check, "✓");
}

.incorrect {
	--color: var(--color-red);
	--icon: var(--icon-not-equal, "≠");
}

table {
	margin-inline: auto;
	border-spacing: 0;
	border-collapse: collapse;
	table-layout: fixed;
	--max-chars-unclamped: log(pow(var(--max), 2), 10);
	--max-chars-rounded: var(--max-chars-unclamped);
	--max-chars: clamp(2, var(--max-chars-rounded), 4);
	--size: calc(100svmin - 2rem);
	font-size: calc(var(--size) / (var(--max) + 1) / var(--max-chars, 2) - 2px);
	font-variant-numeric: tabular-nums;

	@supports (z-index: round(up, 3.5)) {
		--max-chars-rounded: round(up, var(--max-chars-unclamped));
	}
}

th {
	padding: .4em .5em;
	font-size: 60%;
	max-width: 3ch;

	&.selected {
		color: var(--color-blue);
	}

	&:is(thead th:first-child) {
		color: var(--color-neutral-70);
		font-size: 50%;
	}
}

td,
.td-icon {
	position: relative;
	width: calc((var(--max-chars) + 1) * 1ch + .6rem);
	padding: 0;
	border: 1px solid var(--color-neutral-70,);
	--border-rect-width: 2px;
	--border-rect-color: var(--color-blue);
	--border-rect: var(--border-rect-width) solid var(--border-rect-color);
	--border-width: 1px;
	line-height: var(--max-chars);

	label {
		position: absolute;
		font-size: 40%;
		inset: .4em;
		inset-inline-start: 0;
		inset-block-end: auto;
		text-align: center;
		line-height: 1;
		color: oklab(from var(--color-neutral-50) l a b / 50%);
		transition: 0s;
		opacity: 0;

		&:has(+ input:is(.incorrect > *, :focus:not(:placeholder-shown))) {
			opacity: 1;
			transition: 500ms;
		}
	}

	input {
		display: block;
		width: 100%;
		box-sizing: border-box;
		padding: var(--border-width);
		border: none;
		text-align: center;
		background: transparent;

		&:focus {
			outline: none;

			&::placeholder {
				color: oklab(from var(--color-neutral-50) l a b / 30%);
				font-size: 80%;
			}
		}

		&:not(:focus) {
			&:is(.incorrect input) {
				color: color-mix(in oklab, var(--color-red), canvastext 20%);
			}

			&::placeholder {
				color: transparent;
			}
		}
	}
}

td.rect,
.td-icon {
	--blue-intensity: 8%;
	background: color-mix(in oklab, var(--color-blue) var(--blue-intensity), canvas);
	border-color: var(--color-blue);

	&:where(:not(:has(+ .rect))) {
		/* Right side */
		border-inline-end: var(--border-rect);
		--blue-intensity: 15%;

		input {
			padding-inline-end: 0;
		}
	}

	&:where(tr:first-child td) {
		/* Top side */
		border-block-start: var(--border-rect);

		input {
			padding-block-start: 0;
		}
	}

	&:where(th + td) {
		/* Left side */
		border-inline-start: var(--border-rect);

		input {
			padding-inline-start: 0;
		}
	}

	&:where(tr:not(:has(+ tr .rect)) td, .td-icon) {
		/* Bottom side */
		border-block-end: var(--border-rect);
		--blue-intensity: 15%;

		input {
			padding-block-end: 0;
		}
	}
}

td:where(:focus-within),
.td-icon {
	position: relative;
	transition: scale cubic-bezier(.1, .7, .5, 1.6), box-shadow;
	transition-duration: 500ms;
	box-shadow: 0 0 transparent inset;

	&::after {
		content: var(--icon);
		position: absolute;
		top: -.4em;
		right: -.4em;
		width: 1.7em;
		aspect-ratio: 1;
		display: flex;
		align-items: center;
		justify-content: center;
		background: var(--color);
		border-radius: 50%;
		font: var(--fa-font-solid);
		font-size: clamp(.4rem, 40%, 1rem);
		color: white;
		transition: inherit;
		scale: 0;
	}

	&.correct,
	&.incorrect {
		box-shadow: 0 0 0 .1em oklab(from var(--color) l a b / 30%) inset;

		&::after {
			scale: 1;
		}
	}
}

@keyframes type {
	from { content: "1"; }
	to { content: "12"; }
}

.td-icon {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	width: 1.5em;
	aspect-ratio: 1;
	--keystroke-duration: 200ms;
	--typing-duration: calc(var(--keystroke-duration) * 2);

	border: 1px solid var(--color-blue);
	box-shadow: 0 0 transparent inset;

	&::before {
		content: "｜";
	}

	&.incorrect {
		transition-delay: calc(var(--typing-duration) + 200ms + var(--delay) * 1s);

		&::before {
			animation: type var(--typing-duration) 200ms forwards;
		}
	}
}

.large-emoji {
	font-size: 500%;
	margin: 0 auto;
}

dialog#success {
	&::backdrop {
		backdrop-filter: blur(10px);
		transition: 500ms;

		@starting-style {
			backdrop-filter: blur(0px);
		}
	}
}
